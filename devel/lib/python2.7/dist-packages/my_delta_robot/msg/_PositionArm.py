# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_delta_robot/PositionArm.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PositionArm(genpy.Message):
  _md5sum = "d2558a79329645ec1605ebea813b04a6"
  _type = "my_delta_robot/PositionArm"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 base_brazo1
float64 base_brazo2
float64 base_brazo3
float64 codo1_a
float64 codo1_b
float64 codo2_a
float64 codo2_b
float64 codo3_a
float64 codo3_b
float64 act_x
float64 act_y
float64 act_z"""
  __slots__ = ['base_brazo1','base_brazo2','base_brazo3','codo1_a','codo1_b','codo2_a','codo2_b','codo3_a','codo3_b','act_x','act_y','act_z']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       base_brazo1,base_brazo2,base_brazo3,codo1_a,codo1_b,codo2_a,codo2_b,codo3_a,codo3_b,act_x,act_y,act_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PositionArm, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.base_brazo1 is None:
        self.base_brazo1 = 0.
      if self.base_brazo2 is None:
        self.base_brazo2 = 0.
      if self.base_brazo3 is None:
        self.base_brazo3 = 0.
      if self.codo1_a is None:
        self.codo1_a = 0.
      if self.codo1_b is None:
        self.codo1_b = 0.
      if self.codo2_a is None:
        self.codo2_a = 0.
      if self.codo2_b is None:
        self.codo2_b = 0.
      if self.codo3_a is None:
        self.codo3_a = 0.
      if self.codo3_b is None:
        self.codo3_b = 0.
      if self.act_x is None:
        self.act_x = 0.
      if self.act_y is None:
        self.act_y = 0.
      if self.act_z is None:
        self.act_z = 0.
    else:
      self.base_brazo1 = 0.
      self.base_brazo2 = 0.
      self.base_brazo3 = 0.
      self.codo1_a = 0.
      self.codo1_b = 0.
      self.codo2_a = 0.
      self.codo2_b = 0.
      self.codo3_a = 0.
      self.codo3_b = 0.
      self.act_x = 0.
      self.act_y = 0.
      self.act_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.base_brazo1, _x.base_brazo2, _x.base_brazo3, _x.codo1_a, _x.codo1_b, _x.codo2_a, _x.codo2_b, _x.codo3_a, _x.codo3_b, _x.act_x, _x.act_y, _x.act_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.base_brazo1, _x.base_brazo2, _x.base_brazo3, _x.codo1_a, _x.codo1_b, _x.codo2_a, _x.codo2_b, _x.codo3_a, _x.codo3_b, _x.act_x, _x.act_y, _x.act_z,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.base_brazo1, _x.base_brazo2, _x.base_brazo3, _x.codo1_a, _x.codo1_b, _x.codo2_a, _x.codo2_b, _x.codo3_a, _x.codo3_b, _x.act_x, _x.act_y, _x.act_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.base_brazo1, _x.base_brazo2, _x.base_brazo3, _x.codo1_a, _x.codo1_b, _x.codo2_a, _x.codo2_b, _x.codo3_a, _x.codo3_b, _x.act_x, _x.act_y, _x.act_z,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
