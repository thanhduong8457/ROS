// Generated by gencpp from file my_delta_robot/image_pos.msg
// DO NOT EDIT!


#ifndef MY_DELTA_ROBOT_MESSAGE_IMAGE_POS_H
#define MY_DELTA_ROBOT_MESSAGE_IMAGE_POS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_delta_robot
{
template <class ContainerAllocator>
struct image_pos_
{
  typedef image_pos_<ContainerAllocator> Type;

  image_pos_()
    : x()
    , y()
    , z()
    , type()  {
    }
  image_pos_(const ContainerAllocator& _alloc)
    : x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , type(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_type;
  _x_type x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_type;
  _y_type y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _z_type;
  _z_type z;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::my_delta_robot::image_pos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_delta_robot::image_pos_<ContainerAllocator> const> ConstPtr;

}; // struct image_pos_

typedef ::my_delta_robot::image_pos_<std::allocator<void> > image_pos;

typedef boost::shared_ptr< ::my_delta_robot::image_pos > image_posPtr;
typedef boost::shared_ptr< ::my_delta_robot::image_pos const> image_posConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_delta_robot::image_pos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_delta_robot::image_pos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_delta_robot::image_pos_<ContainerAllocator1> & lhs, const ::my_delta_robot::image_pos_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_delta_robot::image_pos_<ContainerAllocator1> & lhs, const ::my_delta_robot::image_pos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_delta_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_delta_robot::image_pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_delta_robot::image_pos_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_delta_robot::image_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_delta_robot::image_pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_delta_robot::image_pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_delta_robot::image_pos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_delta_robot::image_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e41facbac095be2059fd056239eeb7d";
  }

  static const char* value(const ::my_delta_robot::image_pos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e41facbac095be2ULL;
  static const uint64_t static_value2 = 0x059fd056239eeb7dULL;
};

template<class ContainerAllocator>
struct DataType< ::my_delta_robot::image_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_delta_robot/image_pos";
  }

  static const char* value(const ::my_delta_robot::image_pos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_delta_robot::image_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] x\n"
"float32[] y\n"
"float32[] z\n"
"int64[] type\n"
;
  }

  static const char* value(const ::my_delta_robot::image_pos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_delta_robot::image_pos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct image_pos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_delta_robot::image_pos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_delta_robot::image_pos_<ContainerAllocator>& v)
  {
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.z[i]);
    }
    s << indent << "type[]" << std::endl;
    for (size_t i = 0; i < v.type.size(); ++i)
    {
      s << indent << "  type[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.type[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_DELTA_ROBOT_MESSAGE_IMAGE_POS_H
