// Generated by gencpp from file my_delta_robot/posicionxyz.msg
// DO NOT EDIT!


#ifndef MY_DELTA_ROBOT_MESSAGE_POSICIONXYZ_H
#define MY_DELTA_ROBOT_MESSAGE_POSICIONXYZ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_delta_robot
{
template <class ContainerAllocator>
struct posicionxyz_
{
  typedef posicionxyz_<ContainerAllocator> Type;

  posicionxyz_()
    : x0(0.0)
    , y0(0.0)
    , z0(0.0)
    , type(0)  {
    }
  posicionxyz_(const ContainerAllocator& _alloc)
    : x0(0.0)
    , y0(0.0)
    , z0(0.0)
    , type(0)  {
  (void)_alloc;
    }



   typedef float _x0_type;
  _x0_type x0;

   typedef float _y0_type;
  _y0_type y0;

   typedef float _z0_type;
  _z0_type z0;

   typedef int64_t _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::my_delta_robot::posicionxyz_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_delta_robot::posicionxyz_<ContainerAllocator> const> ConstPtr;

}; // struct posicionxyz_

typedef ::my_delta_robot::posicionxyz_<std::allocator<void> > posicionxyz;

typedef boost::shared_ptr< ::my_delta_robot::posicionxyz > posicionxyzPtr;
typedef boost::shared_ptr< ::my_delta_robot::posicionxyz const> posicionxyzConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_delta_robot::posicionxyz_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_delta_robot::posicionxyz_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_delta_robot::posicionxyz_<ContainerAllocator1> & lhs, const ::my_delta_robot::posicionxyz_<ContainerAllocator2> & rhs)
{
  return lhs.x0 == rhs.x0 &&
    lhs.y0 == rhs.y0 &&
    lhs.z0 == rhs.z0 &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_delta_robot::posicionxyz_<ContainerAllocator1> & lhs, const ::my_delta_robot::posicionxyz_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_delta_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_delta_robot::posicionxyz_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_delta_robot::posicionxyz_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_delta_robot::posicionxyz_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_delta_robot::posicionxyz_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_delta_robot::posicionxyz_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_delta_robot::posicionxyz_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_delta_robot::posicionxyz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7254c4df121ba116f9b11125801d35f6";
  }

  static const char* value(const ::my_delta_robot::posicionxyz_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7254c4df121ba116ULL;
  static const uint64_t static_value2 = 0xf9b11125801d35f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_delta_robot::posicionxyz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_delta_robot/posicionxyz";
  }

  static const char* value(const ::my_delta_robot::posicionxyz_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_delta_robot::posicionxyz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x0\n"
"float32 y0\n"
"float32 z0\n"
"int64 type\n"
;
  }

  static const char* value(const ::my_delta_robot::posicionxyz_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_delta_robot::posicionxyz_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x0);
      stream.next(m.y0);
      stream.next(m.z0);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct posicionxyz_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_delta_robot::posicionxyz_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_delta_robot::posicionxyz_<ContainerAllocator>& v)
  {
    s << indent << "x0: ";
    Printer<float>::stream(s, indent + "  ", v.x0);
    s << indent << "y0: ";
    Printer<float>::stream(s, indent + "  ", v.y0);
    s << indent << "z0: ";
    Printer<float>::stream(s, indent + "  ", v.z0);
    s << indent << "type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_DELTA_ROBOT_MESSAGE_POSICIONXYZ_H
