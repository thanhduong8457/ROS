// Generated by gencpp from file my_delta_robot/vmax_amax.msg
// DO NOT EDIT!


#ifndef MY_DELTA_ROBOT_MESSAGE_VMAX_AMAX_H
#define MY_DELTA_ROBOT_MESSAGE_VMAX_AMAX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_delta_robot
{
template <class ContainerAllocator>
struct vmax_amax_
{
  typedef vmax_amax_<ContainerAllocator> Type;

  vmax_amax_()
    : vmax(0.0)
    , amax(0.0)  {
    }
  vmax_amax_(const ContainerAllocator& _alloc)
    : vmax(0.0)
    , amax(0.0)  {
  (void)_alloc;
    }



   typedef double _vmax_type;
  _vmax_type vmax;

   typedef double _amax_type;
  _amax_type amax;





  typedef boost::shared_ptr< ::my_delta_robot::vmax_amax_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_delta_robot::vmax_amax_<ContainerAllocator> const> ConstPtr;

}; // struct vmax_amax_

typedef ::my_delta_robot::vmax_amax_<std::allocator<void> > vmax_amax;

typedef boost::shared_ptr< ::my_delta_robot::vmax_amax > vmax_amaxPtr;
typedef boost::shared_ptr< ::my_delta_robot::vmax_amax const> vmax_amaxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_delta_robot::vmax_amax_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_delta_robot::vmax_amax_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_delta_robot::vmax_amax_<ContainerAllocator1> & lhs, const ::my_delta_robot::vmax_amax_<ContainerAllocator2> & rhs)
{
  return lhs.vmax == rhs.vmax &&
    lhs.amax == rhs.amax;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_delta_robot::vmax_amax_<ContainerAllocator1> & lhs, const ::my_delta_robot::vmax_amax_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_delta_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_delta_robot::vmax_amax_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_delta_robot::vmax_amax_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_delta_robot::vmax_amax_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_delta_robot::vmax_amax_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_delta_robot::vmax_amax_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_delta_robot::vmax_amax_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_delta_robot::vmax_amax_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ab9faecee53d06a238561f5c5a17a83";
  }

  static const char* value(const ::my_delta_robot::vmax_amax_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ab9faecee53d06aULL;
  static const uint64_t static_value2 = 0x238561f5c5a17a83ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_delta_robot::vmax_amax_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_delta_robot/vmax_amax";
  }

  static const char* value(const ::my_delta_robot::vmax_amax_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_delta_robot::vmax_amax_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 vmax\n"
"float64 amax\n"
;
  }

  static const char* value(const ::my_delta_robot::vmax_amax_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_delta_robot::vmax_amax_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vmax);
      stream.next(m.amax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vmax_amax_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_delta_robot::vmax_amax_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_delta_robot::vmax_amax_<ContainerAllocator>& v)
  {
    s << indent << "vmax: ";
    Printer<double>::stream(s, indent + "  ", v.vmax);
    s << indent << "amax: ";
    Printer<double>::stream(s, indent + "  ", v.amax);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_DELTA_ROBOT_MESSAGE_VMAX_AMAX_H
