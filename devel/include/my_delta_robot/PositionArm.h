// Generated by gencpp from file my_delta_robot/PositionArm.msg
// DO NOT EDIT!


#ifndef MY_DELTA_ROBOT_MESSAGE_POSITIONARM_H
#define MY_DELTA_ROBOT_MESSAGE_POSITIONARM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_delta_robot
{
template <class ContainerAllocator>
struct PositionArm_
{
  typedef PositionArm_<ContainerAllocator> Type;

  PositionArm_()
    : base_brazo1(0.0)
    , base_brazo2(0.0)
    , base_brazo3(0.0)
    , codo1_a(0.0)
    , codo1_b(0.0)
    , codo2_a(0.0)
    , codo2_b(0.0)
    , codo3_a(0.0)
    , codo3_b(0.0)
    , act_x(0.0)
    , act_y(0.0)
    , act_z(0.0)  {
    }
  PositionArm_(const ContainerAllocator& _alloc)
    : base_brazo1(0.0)
    , base_brazo2(0.0)
    , base_brazo3(0.0)
    , codo1_a(0.0)
    , codo1_b(0.0)
    , codo2_a(0.0)
    , codo2_b(0.0)
    , codo3_a(0.0)
    , codo3_b(0.0)
    , act_x(0.0)
    , act_y(0.0)
    , act_z(0.0)  {
  (void)_alloc;
    }



   typedef double _base_brazo1_type;
  _base_brazo1_type base_brazo1;

   typedef double _base_brazo2_type;
  _base_brazo2_type base_brazo2;

   typedef double _base_brazo3_type;
  _base_brazo3_type base_brazo3;

   typedef double _codo1_a_type;
  _codo1_a_type codo1_a;

   typedef double _codo1_b_type;
  _codo1_b_type codo1_b;

   typedef double _codo2_a_type;
  _codo2_a_type codo2_a;

   typedef double _codo2_b_type;
  _codo2_b_type codo2_b;

   typedef double _codo3_a_type;
  _codo3_a_type codo3_a;

   typedef double _codo3_b_type;
  _codo3_b_type codo3_b;

   typedef double _act_x_type;
  _act_x_type act_x;

   typedef double _act_y_type;
  _act_y_type act_y;

   typedef double _act_z_type;
  _act_z_type act_z;





  typedef boost::shared_ptr< ::my_delta_robot::PositionArm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_delta_robot::PositionArm_<ContainerAllocator> const> ConstPtr;

}; // struct PositionArm_

typedef ::my_delta_robot::PositionArm_<std::allocator<void> > PositionArm;

typedef boost::shared_ptr< ::my_delta_robot::PositionArm > PositionArmPtr;
typedef boost::shared_ptr< ::my_delta_robot::PositionArm const> PositionArmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_delta_robot::PositionArm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_delta_robot::PositionArm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_delta_robot::PositionArm_<ContainerAllocator1> & lhs, const ::my_delta_robot::PositionArm_<ContainerAllocator2> & rhs)
{
  return lhs.base_brazo1 == rhs.base_brazo1 &&
    lhs.base_brazo2 == rhs.base_brazo2 &&
    lhs.base_brazo3 == rhs.base_brazo3 &&
    lhs.codo1_a == rhs.codo1_a &&
    lhs.codo1_b == rhs.codo1_b &&
    lhs.codo2_a == rhs.codo2_a &&
    lhs.codo2_b == rhs.codo2_b &&
    lhs.codo3_a == rhs.codo3_a &&
    lhs.codo3_b == rhs.codo3_b &&
    lhs.act_x == rhs.act_x &&
    lhs.act_y == rhs.act_y &&
    lhs.act_z == rhs.act_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_delta_robot::PositionArm_<ContainerAllocator1> & lhs, const ::my_delta_robot::PositionArm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_delta_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_delta_robot::PositionArm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_delta_robot::PositionArm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_delta_robot::PositionArm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_delta_robot::PositionArm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_delta_robot::PositionArm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_delta_robot::PositionArm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_delta_robot::PositionArm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2558a79329645ec1605ebea813b04a6";
  }

  static const char* value(const ::my_delta_robot::PositionArm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2558a79329645ecULL;
  static const uint64_t static_value2 = 0x1605ebea813b04a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_delta_robot::PositionArm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_delta_robot/PositionArm";
  }

  static const char* value(const ::my_delta_robot::PositionArm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_delta_robot::PositionArm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 base_brazo1\n"
"float64 base_brazo2\n"
"float64 base_brazo3\n"
"float64 codo1_a\n"
"float64 codo1_b\n"
"float64 codo2_a\n"
"float64 codo2_b\n"
"float64 codo3_a\n"
"float64 codo3_b\n"
"float64 act_x\n"
"float64 act_y\n"
"float64 act_z\n"
;
  }

  static const char* value(const ::my_delta_robot::PositionArm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_delta_robot::PositionArm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.base_brazo1);
      stream.next(m.base_brazo2);
      stream.next(m.base_brazo3);
      stream.next(m.codo1_a);
      stream.next(m.codo1_b);
      stream.next(m.codo2_a);
      stream.next(m.codo2_b);
      stream.next(m.codo3_a);
      stream.next(m.codo3_b);
      stream.next(m.act_x);
      stream.next(m.act_y);
      stream.next(m.act_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionArm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_delta_robot::PositionArm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_delta_robot::PositionArm_<ContainerAllocator>& v)
  {
    s << indent << "base_brazo1: ";
    Printer<double>::stream(s, indent + "  ", v.base_brazo1);
    s << indent << "base_brazo2: ";
    Printer<double>::stream(s, indent + "  ", v.base_brazo2);
    s << indent << "base_brazo3: ";
    Printer<double>::stream(s, indent + "  ", v.base_brazo3);
    s << indent << "codo1_a: ";
    Printer<double>::stream(s, indent + "  ", v.codo1_a);
    s << indent << "codo1_b: ";
    Printer<double>::stream(s, indent + "  ", v.codo1_b);
    s << indent << "codo2_a: ";
    Printer<double>::stream(s, indent + "  ", v.codo2_a);
    s << indent << "codo2_b: ";
    Printer<double>::stream(s, indent + "  ", v.codo2_b);
    s << indent << "codo3_a: ";
    Printer<double>::stream(s, indent + "  ", v.codo3_a);
    s << indent << "codo3_b: ";
    Printer<double>::stream(s, indent + "  ", v.codo3_b);
    s << indent << "act_x: ";
    Printer<double>::stream(s, indent + "  ", v.act_x);
    s << indent << "act_y: ";
    Printer<double>::stream(s, indent + "  ", v.act_y);
    s << indent << "act_z: ";
    Printer<double>::stream(s, indent + "  ", v.act_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_DELTA_ROBOT_MESSAGE_POSITIONARM_H
